@page "/Engineers"
@using ApiModels.Requests
@using ApiModels.Responses
@using Models
@using RestSharp
@using MudBlazor
@using System.Collections.Generic
@using HardHatC2Client.Services
@using System.Collections.ObjectModel
@using System.Linq
@using System.Diagnostics;
@using RestSharp.Authenticators;
@using Blazored.LocalStorage;
@inject RestClient restClientDefault
@inject IToastService toastDefault
@inject NavigationManager navigationManagerDefault

<CascadingAuthenticationState>
    <AuthorizeView Roles="Operator,TeamLead">
        <Authorized>
        <h3 class="text-center">Engineers</h3>
            <MudTabs>
                <MudTabPanel Text="Table View / Creation">
            <br>
            <div oncontextmenu="return false;" @onclick="HandleClick" @onmouseup="HandleMouseUp">
                <div class="container-fluid" style="height:500px; overflow-y:scroll">
                    <div class="row">
                        <div class="col-md-12">
                            <style>
            .selected 
            {
                background-color: #1E88E5 !important;
            }
            .selected > td 
            {
                color: white !important;
            }   
            .selected > td .mud-input 
            {
                color: white !important;
            }
            </style>
                            <MudSwitch @bind-Checked="@HideOfflineEngineers" Label="Hide Offline Engineers" Color="Color.Primary" />
                            @if (HideOfflineEngineers)
                            {
                                EngineerDisplayList = EngineerList.Where(x => x.Status == "Active").ToList();
                            }
                            else
                            {
                                EngineerDisplayList = EngineerList.ToList();
                            }
                            <MudTable Items="@EngineerDisplayList" HorizontalScrollbar="true" Virtualize="true" FixedHeader="true" Height="400px" Hover="true" Dense="true" Elevation="10" Outlined="true" Striped="true" RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent" @ref="mudTable" T="Engineer" Filter="new Func<Engineer,bool>(FilterFunc1)" SortLabel="Sort By">
                               <ToolBarContent>
                                       <MudText Typo="Typo.h6">Implants</MudText>
                                       <MudSpacer />
                                       <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                   </ToolBarContent>
                                <HeaderContent>
                                    
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.ExternalAddress)">External Address</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.ManagerName)">Manager</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.ConnectionType)">Connection Type</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.Address)">Address</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.Hostname)">hostname</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.Username)">username</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.ProcessName)">process</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.ProcessId)">pid</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.Integrity)">Integrity</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.Arch)">arch</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.Sleep)">Sleep Time</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)"><MudTableSortLabel SortBy="new Func<Engineer, object>(x=>x.LastSeen)">lastseen</MudTableSortLabel></MudTh>
                                    <MudTh Style="@setStyle(Settings.IsCheckedBox)">Options</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="Rowcontext">
                                    <MudTd><MudIcon Size="Size.Small" Class="mb-2 ms-2" Icon=@Icons.Material.Outlined.DesktopWindows Color=@SetColor(Rowcontext.Integrity)></MudIcon></MudTd>
                                    <MudTd Style="@GetEngineerStatus(Rowcontext)">@Rowcontext.Status</MudTd>
                                    <MudTd Style="@opacitySetting">@Rowcontext.ExternalAddress</MudTd>
                                    <MudTd Style="@opacitySetting">@Rowcontext.ManagerName</MudTd>
                                    <MudTd Style="@opacitySetting">@Rowcontext.ConnectionType @FindManager(Rowcontext,Rowcontext.ManagerName)</MudTd>
                                    <MudTd Style="@opacitySetting">@Rowcontext.Address</MudTd>
                                    <MudTd Style="@opacitySetting">@Rowcontext.Hostname</MudTd>
                                    <MudTd Style="@opacitySetting">@Rowcontext.Username</MudTd>
                                    <MudTd Style="@opacitySetting">@Rowcontext.ProcessName</MudTd>
                                    <MudTd Style="@opacitySetting">@Rowcontext.ProcessId</MudTd>
                                    <MudTd Style="@opacitySetting">@Rowcontext.Integrity</MudTd>
                                    <MudTd Style="@opacitySetting">@Rowcontext.Arch</MudTd>
                                    <MudTd Style="@opacitySetting">@Rowcontext.Sleep sec</MudTd>
                                    <MudTd Style="@opacitySetting">@LastSeenTimer(Rowcontext)</MudTd>
                                    <MudTd> 
                                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                                            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown">
                                                <MudMenuItem OnClick="() =>ContextMenuItems(0,Rowcontext)">Interact</MudMenuItem>
                                                <MudMenuItem OnClick="() =>ContextMenuItems(1,Rowcontext)">Note</MudMenuItem>
                                                <MudMenuItem OnClick="() =>ContextMenuItems(2,Rowcontext)">Color</MudMenuItem>
                                                <MudMenuItem OnClick="() =>ContextMenuItems(3,Rowcontext)">Exit</MudMenuItem>
                                            </MudMenu>
                                        </MudButtonGroup>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </div>
                    </div>
                </div>
            </div>


            <div class ="container-fluid">
                <h3 class="text-center position-relative">Create New Engineer</h3>
                <hr>

                <MudForm @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudSelect Class="mb-4 mt-4"  T="string" Label="Manager Name" Variant="Variant.Filled" Required="true" @bind-value="formData.managerName" RequiredError="Type is required!">
                        @foreach (Manager manager in @Managers.managersList)
                        {
                            <MudSelectItem Value="@manager.Name"/>
                        }
                    </MudSelect>
                    <MudTextField Class="mb-4 mt-4"  T="int" Label="Connection Attempts" Variant="Variant.Filled" Required="true" @bind-value="formData.ConnectionAttempts" RequiredError="callback address is required!"/>
                    <MudTextField Class="mb-4 mt-4" T="int" Label="sleep timer" Variant="Variant.Filled"  Required="true" @bind-value="formData.Sleep" RequiredError="port is required!"/>
                    <MudTextField Class="mb-4 mt-4" T="string" Label="working hours format (01:00:00-23:00:00)" Variant="Variant.Filled"  @bind-value="formData.WorkingHours" RequiredError="port is required!" />
                    <MudSelect Class="mb-4 mt-4"  T="SpawnEngineerRequest.EngCompileType" Label="Compile Type" Variant="Variant.Filled" Required="true" @bind-value="formData.complieType" RequiredError="Type is required!">
                        <MudSelectItem Value="@(SpawnEngineerRequest.EngCompileType.exe)" />
                        <MudSelectItem Value="@(SpawnEngineerRequest.EngCompileType.serviceexe)" />
                        <MudSelectItem Value="@(SpawnEngineerRequest.EngCompileType.shellcode)" />
                        <MudSelectItem Value="@(SpawnEngineerRequest.EngCompileType.dll)" />
                        <MudSelectItem Value="@(SpawnEngineerRequest.EngCompileType.powershellcmd)" />
                    </MudSelect>
                    <MudSelect Class="mb-4 mt-4" T="SpawnEngineerRequest.SleepTypes" Label="Sleep Encryption Type" Variant="Variant.Filled" Required="true" @bind-value="formData.SleepType" RequiredError="Type is required!">
                        <MudSelectItem Value="@(SpawnEngineerRequest.SleepTypes.None)" />
                        <MudSelectItem Value="@(SpawnEngineerRequest.SleepTypes.Custom_RC4)" />
                    </MudSelect>
                    <MudCheckBox @bind-Checked="@formData.EncodeShellcode" Label="Encode Shellcode with SGN ?" Color="Color.Primary"></MudCheckBox>
                    <MudButton StartIcon="@Icons.Filled.Bolt" Variant="Variant.Filled" Color="Color.Success"  Disabled="@(!success)" @onclick="@validSubmit"> Create</MudButton>
                </MudForm>
            </div>
            <br>
            <br>
            <div>
                <MudTextField @bind-Value="PsCmd" Label="Powershell Commmand" ReadOnly="true" Variant="Variant.Outlined"/>
            </div>
                </MudTabPanel>
                <MudTabPanel Text="Graph View">
                    <MudPaper Height="1100px" Width="100%">
                        <HardHatC2Client.Components.ImplantGraph></HardHatC2Client.Components.ImplantGraph>
                    </MudPaper>
                </MudTabPanel>
            </MudTabs>
        </Authorized>
    </AuthorizeView>

<AuthorizeView Roles="Guest">
        <Authorized>
                <h3 class="text-center">Engineers</h3>
                    <MudTabs>
                        <MudTabPanel Text="Table View / Creation">
                    <br>
                    <div oncontextmenu="return false;" @onclick="HandleClick" @onmouseup="HandleMouseUp">
                        <div class="container-fluid" style="height:500px; overflow-y:scroll">
                            <div class="row">
                                <div class="col-md-12">
                                    <style>
                    .selected 
                    {
                        background-color: #1E88E5 !important;
                    }
                    .selected > td 
                    {
                        color: white !important;
                    }   
                    .selected > td .mud-input 
                    {
                        color: white !important;
                    }
                    </style>
                                    <MudSwitch @bind-Checked="@HideOfflineEngineers" Label="Hide Offline Engineers" Color="Color.Primary" />
                                    @if (HideOfflineEngineers)
                                    {
                                        EngineerDisplayList = EngineerList.Where(x => x.Status == "Active").ToList();
                                    }
                                    else
                                    {
                                        EngineerDisplayList = EngineerList.ToList();
                                    }
                                    <MudTable Items="@EngineerDisplayList" HorizontalScrollbar="true" Virtualize="true" FixedHeader="true" Height="400px" Hover="true" Dense="true" Elevation="10" Outlined="true" Striped="true" RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent" @ref="mudTable" T="Engineer">
                                        <ToolBarContent>
                                                <MudText Typo="Typo.h6">Implants</MudText>
                                                <MudSpacer />
                                                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                            </ToolBarContent>
                                        <HeaderContent>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)"></MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">Status</MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">External Address</MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">Manager</MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">Connection Type</MudTh>                        
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">Address</MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">hostname</MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">username</MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">process</MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">pid</MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">Integrity</MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">arch</MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">Sleep Time</MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">lastseen</MudTh>
                                            <MudTh Style="@setStyle(Settings.IsCheckedBox)">Options</MudTh>
                                        </HeaderContent>
                                        <RowTemplate Context="Rowcontext">
                                            <MudTd><MudIcon Size="Size.Small" Class="mb-2 ms-2" Icon=@Icons.Material.Outlined.DesktopWindows Color=@SetColor(Rowcontext.Integrity)></MudIcon></MudTd>
                                            <MudTd Style="@GetEngineerStatus(Rowcontext)">@Rowcontext.Status</MudTd>
                                            <MudTd Style="@opacitySetting">@Rowcontext.ExternalAddress</MudTd>
                                            <MudTd Style="@opacitySetting">@Rowcontext.ManagerName</MudTd>
                                            <MudTd Style="@opacitySetting">@Rowcontext.ConnectionType @FindManager(Rowcontext,Rowcontext.ManagerName)</MudTd>
                                            <MudTd Style="@opacitySetting">@Rowcontext.Address</MudTd>
                                            <MudTd Style="@opacitySetting">@Rowcontext.Hostname</MudTd>
                                            <MudTd Style="@opacitySetting">@Rowcontext.Username</MudTd>
                                            <MudTd Style="@opacitySetting">@Rowcontext.ProcessName</MudTd>
                                            <MudTd Style="@opacitySetting">@Rowcontext.ProcessId</MudTd>
                                            <MudTd Style="@opacitySetting">@Rowcontext.Integrity</MudTd>
                                            <MudTd Style="@opacitySetting">@Rowcontext.Arch</MudTd>
                                            <MudTd Style="@opacitySetting">@Rowcontext.Sleep sec</MudTd>
                                            <MudTd Style="@opacitySetting">@LastSeenTimer(Rowcontext)</MudTd>
                                            <MudTd> 
                                                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                                                    <MudMenu Disabled="true" Icon="@Icons.Material.Filled.ArrowDropDown">
                                                        <MudMenuItem OnClick="() =>ContextMenuItems(0,Rowcontext)">Interact</MudMenuItem>
                                                        <MudMenuItem OnClick="() =>ContextMenuItems(1,Rowcontext)">Note</MudMenuItem>
                                                        <MudMenuItem OnClick="() =>ContextMenuItems(2,Rowcontext)">Color</MudMenuItem>
                                                        <MudMenuItem OnClick="() =>ContextMenuItems(3,Rowcontext)">Exit</MudMenuItem>
                                                    </MudMenu>
                                                </MudButtonGroup>
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </div>
                            </div>
                        </div>
                    </div>
                        </MudTabPanel>
                        <MudTabPanel Text="Graph View">
                            <MudPaper Height="1100px" Width="100%">
                                <HardHatC2Client.Components.ImplantGraph></HardHatC2Client.Components.ImplantGraph>
                            </MudPaper>
                        </MudTabPanel>
                    </MudTabs>
                </Authorized>
    </AuthorizeView>
<AuthorizeView Roles="Guest,Operator,TeamLead,Administrator">
        <NotAuthorized>
            <h1 class="text-center">Not Authorized</h1>
            <HardHatC2Client.Components.UnAuthorizedDialogBox></HardHatC2Client.Components.UnAuthorizedDialogBox>
        </NotAuthorized>
</AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Inject]
    private static RestClient _restClient { get; set; }
    [Inject]
    private static IToastService toastService { get; set; }
    [Inject]
    private static NavigationManager Nav { get; set; }

    [Inject]
    public ILocalStorageService localStorage { get; set; }

    protected internal static ObservableCollection<Engineer> EngineerList = new ObservableCollection<Engineer>();
    protected internal static List<Engineer> EngineerDisplayList = new List<Engineer>();
    private static SpawnEngineerRequest formData = new SpawnEngineerRequest();
    private string EngineerTestID { get; set; }
    public Double OpacityValue { get; set; }
    public static bool FirstRender = true;
    private static bool Initialized = false;
    private bool success;
    private string[] errors = { };
    private MudTable<Engineer> mudTable;
    private int selectedRowNumber = -1;
    public static string PsCmd { get; set; }
    private static string opacitySetting {get; set;}
    private static Stopwatch stopwatch = new Stopwatch();
    private static bool IsCurrentLocation { get; set; }
    public static bool HideOfflineEngineers { get; set; }
    public delegate void OnStateChangeDelegate();
    public static OnStateChangeDelegate OnStateChange;
    private static DateTime? LastRefresh { get; set; } = null;
    private string searchString1 = "";

    public static async Task SetPsCommand(string command)
    {
        PsCmd = command;
    }

    private string setStyle(bool IsDark)
    {
        if(IsDark)
        {
            return "background:white; color:black;";
        }
        return "background:#333333; color:white;"; 
    }

    private static Color SetColor(string integrity)
    {
        if (integrity.Equals("high",StringComparison.CurrentCultureIgnoreCase))
        {
            return Color.Warning;
        }
        if (integrity.Equals("system",StringComparison.CurrentCultureIgnoreCase))
        {
            return Color.Error;
        }
        else if (integrity.Equals("medium",StringComparison.CurrentCultureIgnoreCase))
        {
            return Color.Info;
        }
        else if (integrity.Equals("low",StringComparison.CurrentCultureIgnoreCase))
        {
            return Color.Tertiary;
        }
        return Color.Primary;
    }

    public async Task validSubmit()
    {
        if (formData.managerName != null)
        {
            await CreateEngineer();
        }
    }

    void HandleClick(MouseEventArgs args)
    {
        //can handle left click inside the table
    }

    void HandleMouseUp(MouseEventArgs args)
    {
        if (args.Button == 2)
        {
            //can handle right click inside the table
            if (mudTable.SelectedItem != null)
            {
                mudTable.SelectedItem = null;
            }
        }
    }

    private void RowClickEvent(TableRowClickEventArgs<Engineer> tableRowClickEventArgs)
    {
    }

    private string SelectedRowClassFunc(Engineer engineer, int rowNumber)
    {
        if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(engineer))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
    
    private bool FilterFunc1(Engineer search) => FilterFunc(search, searchString1);

    private bool FilterFunc(Engineer search, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
    //for each element in the array if it contains searchString then return true
        if (search.Id.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Sleep.ToString().ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Address.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Arch.ToString().ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Hostname.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Integrity.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.LastSeen.ToString().ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.ManagerName.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Username.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.ProcessId.ToString().ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.ProcessName.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.ConnectionType.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.ExternalAddress.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Status.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        return false;
    }

    public static void ContextMenuItems(int options, Engineer engineer)
    {
        switch(options)
        {
            case 0:
                //Interact
                Interact.InteractEngineers.Add(engineer);
                //compare the eng.ProcessId@eng.Address to the values in the Interact.EngTabTitleDic dictionary, if it matches any of the values, then add it to the dictionary but its value is ng.ProcessId@eng.Address + a number that is equal to the number of values it matched in the dictionary

                if (Interact.EngTabTitleDic.ContainsValue(engineer.ProcessId + "@" + engineer.Address) && Interact.EngTabTitleDic.ContainsKey(engineer.Id) == false)
                {
                    int count = 0;
                    foreach (string key in Interact.EngTabTitleDic.Keys)
                    {
                        if (Interact.EngTabTitleDic[key] == engineer.ProcessId + "@" + engineer.Address)
                        {
                            count++;
                        }
                        else if (Interact.EngTabTitleDic[key] == engineer.ProcessId + "@" + engineer.Address + "(" + count + ")")
                        {
                            count++;
                        }
                    }
                    Interact.EngTabTitleDic.Add(engineer.Id, engineer.ProcessId + "@" + engineer.Address + "(" + count + ")");
                }
                else if(!Interact.EngTabTitleDic.ContainsKey(engineer.Id))
                {
                    Interact.EngTabTitleDic.Add(engineer.Id, engineer.ProcessId + "@" + engineer.Address);
                }

                Nav.NavigateTo("/Interact");
                break;
            case 1:
                //note    
                break;
            case 2:
                //color     
                break;
            case 3:
                //exit     
                break;
        }
    }

    public static string FindManager(Engineer currenteng,string managerName)
    {
        if(currenteng.ConnectionType.Equals("http",StringComparison.CurrentCultureIgnoreCase))
        {
            return "";
        }
        foreach(var man in Managers.managersList)
        {
            if(man.Name == managerName)
            {
                return man.connectionMode.ToString();
            }
        }
        return "";
    }

    public static async Task CreateEngineer()
    {
        string resource = "/engineers";
        var createObject = new SpawnEngineerRequest
		{
			managerName = formData.managerName,
            ConnectionAttempts = formData.ConnectionAttempts,
            Sleep = formData.Sleep,
            complieType = formData.complieType,
            WorkingHours = formData.WorkingHours,
            SleepType = formData.SleepType,
		};
        var request = new RestRequest(resource,Method.Post);
        request.AddJsonBody(createObject);
        ShowInfoToast("Sending Request To Create Engineer");
        request.OnBeforeDeserialization = resp =>
        {
            Console.WriteLine(resp.Content);
        };
        var requestResponse = await _restClient.PostAsync<string>(request);
        if (requestResponse != null)
        {
            ShowSuccessToast(requestResponse);
        }
        //reset the form data object 
       // formData = new SpawnEngineerRequest();
      //  OnStateChange();
    }

    public static async Task GetAllEngineers()
    {
        string resource = "/engineers";
        var request = new RestRequest(resource, Method.Get);
        try
        {
            var requestResponse = await _restClient.GetAsync<List<Engineer>>(request);
            if (requestResponse != null)
            {
                foreach (Engineer engineerresponse in requestResponse)
                {
                    engineerresponse.Init();

                    // if any of the engineers Id match then dont add them to the list

                    //remove null objects from the EngineerList
                    foreach(Engineer eng in EngineerList)
                    {
                        if (eng == null)
                        {
                            EngineerList.Remove(eng);
                        }
                    }
                    if (!EngineerList.Any(x => x.Id == engineerresponse.Id))
                    {
                        EngineerList.Add(engineerresponse);
                    }
                    if (EngineerList.Any(x => x.Id == engineerresponse.Id))
                    {
                        // get the Engineer object fro mthe list with the matching id
                        var engineer = EngineerList.First(x => x.Id == engineerresponse.Id);
                        // update the object with the new values
                        engineer.LastSeen = engineerresponse.LastSeen;
                        engineer.Sleep = engineerresponse.Sleep;
                    }
                }
            } 
        }
        catch
        {  }
    }

    public static async Task CheckInEngineer(Engineer engineer)
    {
        engineer.Init();
        //remove null objects from the EngineerList
        foreach (Engineer eng in EngineerList)
        {
            if (eng == null)
            {
                EngineerList.Remove(eng);
            }
        }
        // if any of the engineers Id match then dont add them to the list
        if (!EngineerList.Any(x => x.Id == engineer.Id))
        {
            EngineerList.Add(engineer);
        }
        if (EngineerList.Any(x => x.Id == engineer.Id))
        {
            // get the Engineer object fro mthe list with the matching id
            var Currentengineer = EngineerList.First(x => x.Id == engineer.Id);
            // update the object with the new values
            Currentengineer.LastSeen = engineer.LastSeen;
            Currentengineer.Sleep = engineer.Sleep;
        }

    }


    public static string GetEngineerStatus(Engineer engineer)
    {   
        // if engineer LastSeen is in the past then Status is offline
        // add 5 seconds to the LastSeen to make sure the engineer is still online
        int sleepTime = engineer.Sleep;
        //makes it so the ui wont auto timeout engineers at sleep 0 unless they dont check in for 4-5 seconds 
        if (sleepTime == 0)
        {
            sleepTime = 2;
        }
        if (engineer.LastSeen.AddSeconds(sleepTime*3) < DateTime.Now)
        {
            engineer.Status = "Offline";
        }
        else
        {
            engineer.Status = "Active";
        }
        //ignorning case if engineer status is active return 1 else return 0.4
        if (engineer.Status.ToLower() == "active")
        {
            opacitySetting = "opactity:1";
            return "opactity:1";
        }
        else
        {
            opacitySetting = "opacity:.4";
            return "opacity:.4";
        }
    }

    public static string LastSeenTimer(Engineer engineer)
    {
        string output = "";
        //based on lastSeen time use a timer and return the time since last seen in a string, print ms if less than 1 second print seconds if less than 1 minute print minutes if less than 1 hour print hours if less than 1 day print , only print the whole number
        var timeSinceLastSeen = DateTime.Now - engineer.LastSeen;
        //dont let the timeSinceLastSeen be negative
        if (timeSinceLastSeen < TimeSpan.Zero)
        {
            timeSinceLastSeen = timeSinceLastSeen.Negate();
        }

        if (timeSinceLastSeen.TotalMilliseconds < 1000)
        {
            output = engineer.LastSeenTimer = $"{timeSinceLastSeen.Milliseconds} ms";
        }
        else if (timeSinceLastSeen.TotalSeconds < 60)
        {
            output = engineer.LastSeenTimer = $"{timeSinceLastSeen.Seconds} sec";
        }
        else if (timeSinceLastSeen.TotalMinutes < 60)
        {
            output = engineer.LastSeenTimer = $"{timeSinceLastSeen.Minutes} min";
        }
        else if (timeSinceLastSeen.TotalHours < 24)
        {
            output = engineer.LastSeenTimer = $"{timeSinceLastSeen.Hours} hours";
        }
        else if (timeSinceLastSeen.TotalDays < 1)
        {
            output = engineer.LastSeenTimer = $"{timeSinceLastSeen.Days} days";
        }
        else
        {
            output = engineer.LastSeenTimer = $"{timeSinceLastSeen.Days} days";
        }
        OnStateChange();
        return output;
    }

    public static void ShowSuccessToast(string successMessage)
    {
        toastService.ShowSuccess(successMessage);
    }
    public static void ShowErrorToast(string errorMessage)
    {
        toastService.ShowError(errorMessage);
    }

    public static void ShowInfoToast(string infoMessage)
    {
        toastService.ShowInfo(infoMessage);
    }

    public static void ShowWarningToast(string warningmessage)
    {
        toastService.ShowWarning(warningmessage);
    }


    public void ImplementOnStateChangeEvent()
    {
        if (LastRefresh == null)
        {
            LastRefresh = DateTime.Now;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            // if more then 500 ms has passed since the last refresh then refresh the page
            if (DateTime.Now.Subtract(LastRefresh.Value).TotalMilliseconds > 500)
            {
                LastRefresh = DateTime.Now;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            
            _restClient = restClientDefault;
            string jwtToken = await localStorage.GetItemAsync<string>("bearerToken");
            RestClientOptions options = new RestClientOptions();
            options.BaseUrl = _restClient.Options.BaseUrl;
            options.RemoteCertificateValidationCallback = _restClient.Options.RemoteCertificateValidationCallback;
            options.Authenticator = new JwtAuthenticator(jwtToken);
            _restClient = new RestClient(options);
            if (FirstRender)
            {
                await Engineers.GetAllEngineers();
                Nav.NavigateTo("Interact");
                FirstRender = false;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        OnStateChange = ImplementOnStateChangeEvent;
        toastService = toastDefault;
        Nav = navigationManagerDefault;

        if (stopwatch.IsRunning == false)
        {
            stopwatch.Start();
            Task.Run(() =>
            {
                while (true)
                {
                    if (stopwatch.ElapsedMilliseconds > 500)
                    {
                        OnStateChange();
                        stopwatch.Restart();
                    }
                    Thread.Sleep(100);
                }
            });
        }    
    }
}

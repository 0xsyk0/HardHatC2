@using ApiModels.Plugin_BaseClasses;
@using ApiModels.Requests;
@using ApiModels.Shared;
@using HardHatC2Client.Models;
@using HardHatC2Client.Pages;
@using HardHatC2Client.Plugin_Management;
@using HardHatC2Client.Utilities;
@using MudExtensions.Enums;
@using RestSharp;
@using System.Text;

<div class="container-fluid">
    <h3>Create New Implant</h3>
    <hr>
    @if (String.IsNullOrEmpty(ImplantName))
    {
        <MudStepper @ref=_stepper Class="mud-width-full" HeaderSize="Size.Large" Color="Color.Primary" Variant="Variant.Filled" HeaderTextView="MudExtensions.Enums.HeaderTextView.All" PreventStepChangeAsync="new Func<StepChangeDirection, Task<bool>>(CheckChange)"  >
            <ChildContent>
                <MudStep Icon="@MaterialDesignIcons.Normal.Wrench" Title="Implant Type">
                    <ChildContent>
                        <MudForm @ref=_form @bind-IsValid="@success">
                            <MudSelectExtended Clearable="true" Class="mb-4 mt-4" T="string" Label="Implant Type" Variant="Variant.Filled" Required="true" @bind-value="ImplantName" RequiredError="Type is required!">
                                @foreach (var CreationPlugin in Plugin_Management.PluginService.pluginHub.ImplantCreation_Plugins)
                                {
                                    string displayname = CreationPlugin.Metadata.Name;
                                    if (displayname.Equals("Default",StringComparison.CurrentCultureIgnoreCase))
                                    {
                                        displayname = "Engineer";
                                    }
                                    <MudSelectItemExtended Value="@CreationPlugin.Metadata.Name"> @displayname </MudSelectItemExtended>
                                }
                            </MudSelectExtended>
                    </MudForm>
                </ChildContent>
            </MudStep>
        </ChildContent>
        </MudStepper>
    }
    else
    {
    <CascadingValue Value="IsPostEx">
    <CascadingValue Value="Dialog">
    <CascadingValue Value="SetImplantNameText">
                    <DynamicComponent Type="@PluginService.GetImplantCreationPlugin(ImplantName).GetComponentType()" Parameters=@DynamicComponentParameters />
    </CascadingValue>
    </CascadingValue>
    </CascadingValue>
    }
    
</div>

@code {
    //this is used to create a new implant
    [Inject]
    private IDialogService dialogService { get; set; }
    [Inject]
    private static RestClient _restClient { get; set; }

    [Parameter]
    public bool IsPostEx { get; set; } = false;

    [CascadingParameter]
    public MudDialogInstance Dialog { get; set; }

    public static string ImplantName { get; set; } = "";
    bool success { get; set; } = false;
    MudForm _form;
    bool _loading;
    MudStepper _stepper;
    public IDictionary<string, object> DynamicComponentParameters = new Dictionary<string, object>();

    public void SetImplantNameText(string newText)
    {
        //Console.WriteLine("Setting implant name to: " + newText);
        ImplantName = newText;
    }

    bool IsImplantSelected()
    {
        if (ImplantName == "")
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private async Task<bool> CheckChange(StepChangeDirection direction)
    {
        // Always allow stepping backwards, even if forms are invalid
        if (direction == StepChangeDirection.Backward)
        {
            return false;
        }
        if (_stepper.GetActiveIndex() == 0)
        {
            _loading = true;
            StateHasChanged();
            await Task.Delay(100);
            await _form.Validate();
            _loading = false;
            StateHasChanged();
            return !_form.IsValid;
        }
        else
        {
            return false;
        }
    }

    protected override void OnInitialized()
    {
        DynamicComponentParameters.Add("OnSetImplantName",EventCallback.Factory.Create<string>(this, SetImplantNameText));
    }
}

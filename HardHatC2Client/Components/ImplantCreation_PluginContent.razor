@using ApiModels.Plugin_BaseClasses;
@using ApiModels.Requests;
@using ApiModels.Shared;
@using HardHatC2Client.Models;
@using HardHatC2Client.Pages;
@using HardHatC2Client.Plugin_Management;
@using HardHatC2Client.Utilities;
@using MudExtensions.Enums;
@using RestSharp;
@using System.Text;


<MudStepper @ref="_stepper" Class="mud-width-full" HeaderSize="Size.Large" Color="Color.Primary" Variant="Variant.Filled" HeaderTextView="MudExtensions.Enums.HeaderTextView.All" PreventStepChangeAsync="new Func<StepChangeDirection, Task<bool>>(CheckChange)"  >
            <ChildContent>
                <MudStep Icon="@MaterialDesignIcons.Normal.Cog" Title="Commands">
                    <ChildContent>
                        <MudForm @ref="_form2" @bind-IsValid="@success">
                                            <MudTransferList  Class="d-flex align-center justify-center" MaxItems="10" @ref="_transferList" T="string" @bind-StartCollection="EngCommandList" @bind-EndCollection="selectedEngCommandList" Color="Color.Primary"
                                        StyleListCommon="background-color: var(--mud-palette-background-grey); width: 300px" MultiSelection="true" SelectAllType="SelectAllType.Buttons"
                                        OrderFunc="@(new Func<ICollection<string>, ICollection<string>>(OrderMethod))" ButtonVariant="Variant.Text"
                                        AllowDoubleClick="false" />
                        </MudForm>
                    </ChildContent>
                </MudStep>
                <MudStep Icon="@MaterialDesignIcons.Normal.PlusNetwork" Title="Modules">
                    <ChildContent>
                        <MudForm @ref="_form3" @bind-IsValid="@success">
                                    <MudTransferList Class="d-flex align-center justify-center" MaxItems="10" @ref="_moduletransferList" T="string" @bind-StartCollection="EngModuleList" @bind-EndCollection="selectedEngModuleList" Color="Color.Primary"
                                                        StyleListCommon="background-color: var(--mud-palette-background-grey); width: 300px" MultiSelection="true" SelectAllType="SelectAllType.Buttons"
                                                        OrderFunc="@(new Func<ICollection<string>, ICollection<string>>(OrderMethod))" ButtonVariant="Variant.Text"
                                                        AllowDoubleClick="false" />
                                    @if (selectedEngModuleList.Contains("SleepEncrypt"))
                                    {
                                        <MudSelect Clearable="true" Class="mb-4 mt-4" T="SleepTypes" Label="Sleep Encryption Type" Variant="Variant.Filled" Required="true" @bind-value="formData.SleepType" RequiredError="Type is required!">
                                            <MudSelectItem Value="@(SleepTypes.None)" />
                                            <MudSelectItem Value="@(SleepTypes.Custom_RC4)" />
                                        </MudSelect>
                                    }
                @if (selectedEngModuleList.Contains("DataChunk"))
                {
                    <MudTextField Clearable="true" T="int?" Required="true" Class="mb-4 mt-4" Label="Chunk Size (In Bytes ex. 1000 is 1kb)" Variant="Variant.Filled" RequiredError="Size of Data chunk is required" @bind-Value="formData.ChunkSize" />
                    formData.IsChunkEnabled = true;
                }
                    </MudForm>
                    </ChildContent>
                </MudStep>
                <MudStep Icon="@Icons.Material.Outlined.Construction" Title="Build Options">
                    <ChildContent>
                        <MudForm @ref="_form4" @bind-IsValid="@success">
                            <MudSelectExtended ValuePresenter="ValuePresenter.Text"  T="string" Clearable="true" Label="Manager" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Filled" Required="true" @bind-value="formData.managerName" RequiredError="Type is required!">
                                <MudSelectItemGroupExtended  T="string" Text="HTTP" Sticky="true" Nested="true">
                                    @foreach (Manager manager in @Managers.managersList.Where(x => x.Type == ManagerType.http))
                                    {
                                        <ItemTemplate>
                                            <MudStack Row="true" Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center">
                                                <MudSelectItemExtended Value="@manager.Name" />
                                                <MudChip Color="Color.Info" Variant="Variant.Outlined">Connect Address: @manager.ConnectionAddress</MudChip>
                                                <MudChip Color="Color.Info" Variant="Variant.Outlined">Connect Port: @manager.ConnectionPort</MudChip>
                                            </MudStack>
                                        </ItemTemplate>
                                    }
                                </MudSelectItemGroupExtended>
                                <MudSelectItemGroupExtended T="string" Text="HTTPS" Sticky="true" Nested="true">
                                    @foreach (Manager manager in @Managers.managersList.Where(x => x.Type == ManagerType.https))
                                    {
                                        <ItemTemplate>
                                            <MudStack Row="true" Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center">
                                                <MudSelectItemExtended Value="@manager.Name" />
                                                <MudChip Color="Color.Info" Variant="Variant.Outlined">Connect Address: @manager.ConnectionAddress</MudChip>
                                                <MudChip Color="Color.Info" Variant="Variant.Outlined">Connect Port: @manager.ConnectionPort</MudChip>
                                            </MudStack>
                                        </ItemTemplate>
                                    }
                                </MudSelectItemGroupExtended>
                                <MudSelectItemGroupExtended T="string" Text="TCP" Sticky="true" Nested="true">
                                    @foreach (Manager manager in @Managers.managersList.Where(x => x.Type == ManagerType.tcp))
                                    {
                                        if (manager.connectionMode == ConnectionMode.reverse)
                                        {
                                            <ItemTemplate>
                                                <MudStack Row="true" Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center">
                                                    <MudSelectItemExtended Value="@manager.Name"/>
                                                    <MudChip Color="Color.Info" Variant="Variant.Outlined">Connect Direction: @manager.connectionMode</MudChip>
                                                    <MudChip Color="Color.Info" Variant="Variant.Outlined">Connect Address: @manager.ConnectionAddress</MudChip>
                                                    <MudChip Color="Color.Info" Variant="Variant.Outlined">Connect Port: @manager.ConnectionPort</MudChip>
                                                </MudStack>
                                            </ItemTemplate>
                                        }
                                        else if (manager.connectionMode == ConnectionMode.bind)
                                        {
                                            <ItemTemplate>
                                                <MudStack Row="true" Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center">
                                                    <MudSelectItemExtended Value="@manager.Name"/>
                                                    <MudChip Color="Color.Info" Variant="Variant.Outlined">Connect Direction: @manager.connectionMode</MudChip>
                                                    <MudChip Color="Color.Info" Variant="Variant.Outlined">Local Host Only ?: @manager.IsLocalHost</MudChip>
                                                    <MudChip Color="Color.Info" Variant="Variant.Outlined">Listening Port: @manager.ListenPort</MudChip>
                                                </MudStack>
                                            </ItemTemplate>
                                        }
                                    }
                                </MudSelectItemGroupExtended>
                                <MudSelectItemGroupExtended T="string" Text="SMB" Sticky="true" Nested="true">
                                    @foreach (Manager manager in @Managers.managersList.Where(x => x.Type == ManagerType.smb))
                                    {
                                       
                                            <ItemTemplate>
                                                <MudStack Row="true" Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center">
                                                    <MudSelectItemExtended Value="@manager.Name"/>
                                                    <MudChip Color="Color.Info" Variant="Variant.Outlined">Connect Direction: @manager.connectionMode</MudChip>
                                                    <MudChip Color="Color.Info" Variant="Variant.Outlined">Named Pipe: @manager.NamedPipe</MudChip>
                                                    @if (manager.connectionMode == ConnectionMode.reverse)
                                                    {
                                                        <MudChip Color="Color.Info" Variant="Variant.Outlined">Connect Address: @manager.ConnectionAddress</MudChip>
                                                    }
                                                </MudStack>
                                            </ItemTemplate>
                                    }
                                </MudSelectItemGroupExtended>
                            </MudSelectExtended>
                            <MudTextField Clearable="true" Class="mb-4 mt-4" T="int" Label="Connection Attempts" Variant="Variant.Filled" Required="true" @bind-value="formData.ConnectionAttempts" RequiredError="callback address is required!" />
                            <MudTextField Clearable="true" Class="mb-4 mt-4" T="int" Label="sleep timer" Variant="Variant.Filled" Required="true" @bind-value="formData.Sleep" RequiredError="port is required!" />
                            <div class="d-flex">
                                <MudDatePicker Variant="Variant.Filled" Class="mr-1 mb-4 mt-4" Clearable="true" Required="true" Label="Pick a kill date" @bind-Date="formData.selectedKillDate"></MudDatePicker>
                                <MudTimePicker Variant="Variant.Filled" Class="ml-1 mb-4 mt-4" Clearable="true" Label="Pick a time in UTC" Required="true" @bind-Time="formData.selectedKillTime"></MudTimePicker>
                            </div>
                            @if (IsPostEx)
                        {
                            <MudSelectExtended Clearable="true" Class="mb-4 mt-4" T="ImpCompileType" Label="Compile Type" Variant="Variant.Filled" Required="true" @bind-value="formData.complieType" RequiredError="Type is required!">
                                <MudSelectItem Value="@(ImpCompileType.exe)" />
                                <MudSelectItem Value="@(ImpCompileType.serviceexe)" />
                            </MudSelectExtended>
                        }
                        else
                        {
                                <MudSelectExtended Clearable="true" Class="mb-4 mt-4" T="ImpCompileType" Label="Compile Type" Variant="Variant.Filled" Required="true" @bind-value="formData.complieType" RequiredError="Type is required!">
                                    <MudSelectItemExtended Value="@(ImpCompileType.exe)" />
                                    <MudSelectItemExtended Value="@(ImpCompileType.serviceexe)" />
                                    <MudSelectItemExtended Value="@(ImpCompileType.shellcode)" />
                                    <MudSelectItemExtended Value="@(ImpCompileType.dll)" />
                                    <MudSelectItemExtended Value="@(ImpCompileType.powershellcmd)" />
                                </MudSelectExtended>
                            }
                            @if(formData.complieType == ImpCompileType.shellcode)
                            {
                                <MudCheckBox @bind-Checked="@formData.EncodeShellcode" Label="Encode Shellcode with SGN ?" Color="Color.Primary"></MudCheckBox>        
                            }
                        </MudForm>
                    </ChildContent>
                </MudStep>
                <MudStep Icon="@Icons.Material.Filled.Build" Title="Finalize & Submit">
                    <ChildContent>
                    <!-- for each item in formData print the property name and its value-->
                    @foreach (var item in formData.GetType().GetProperties())
                    {
                    if (item.Name.Equals("WorkingHours", StringComparison.CurrentCultureIgnoreCase) || item.Name.Equals("selectedKillDate", StringComparison.CurrentCultureIgnoreCase) || item.Name.Equals("selectedKillTime", StringComparison.CurrentCultureIgnoreCase))
                        {
                            continue;
                        }
                        else if (item.Name.Equals("IsPostEx", StringComparison.CurrentCultureIgnoreCase))
                        {
                            <div>
                                <MudText>Post Exploitation: </MudText>
                                <MudChip Color="Color.Info" Variant="Variant.Outlined">@IsPostEx</MudChip>
                            </div>
                            <br>
                        }
                        else if (item.Name.Equals("ImplantType", StringComparison.CurrentCultureIgnoreCase))
                        {
                            <div>
                                <MudText>Implant Type: </MudText>
                                <MudChip Color="Color.Info" Variant="Variant.Outlined">Engineer</MudChip>
                            </div>
                        <br>
                        }
                        else if (item.Name.Equals("encodeshellcode", StringComparison.CurrentCultureIgnoreCase) && item.GetValue(formData) == null)
                        {
                            <div class="d-flex">
                                <MudText>Encode Shellcode: </MudText>
                                <MudChip Color="Color.Info" Variant="Variant.Outlined">false</MudChip>
                            </div>
                            <br>
                        }
                        else if (item.Name.Equals("KillDateTime", StringComparison.CurrentCultureIgnoreCase) && formData.selectedKillDate != null && formData.selectedKillTime != null)
                        {
                            var KillDateTime = (DateTime)(formData.selectedKillDate.Value.Date + formData.selectedKillTime);
                            <div class="d-flex">
                                <MudText>Kill Date: </MudText>
                                <MudChip Color="Color.Info" Variant="Variant.Outlined">@KillDateTime</MudChip>
                            </div>
                           
                        <br>
                        }
                        else if (item.Name.Equals("IncludedCommands", StringComparison.CurrentCultureIgnoreCase))
                        {
                            <div class="d-flex">
                                <MudText>Included Commands: </MudText>
                                <MudIconButton OnClick="() => _incCommand_mbox.Show()" Icon="@Icons.Material.Filled.Visibility" Color="@Color.Primary" aria-label="view included commands" />
                            </div>
                        <br>
                            <MudMessageBox @ref="_incCommand_mbox" Title="Included Commands" CancelText="Close">
                                <MessageContent>
                                    @foreach (string command in selectedEngCommandList)
                                    {
                                        <p>@command</p>
                                    }
                                </MessageContent>
                            </MudMessageBox>
                        }
                        else if (item.Name.Equals("IncludedModules", StringComparison.CurrentCultureIgnoreCase))
                        {
                            <div class="d-flex">
                                <MudText>Included Modules: </MudText>
                                <MudIconButton OnClick="() => _incModule_mbox.Show()" Icon="@Icons.Material.Filled.Visibility" Color="@Color.Primary" aria-label="view included modules" />
                            </div>
                        <br>
                            <MudMessageBox @ref="_incModule_mbox" Title="Included Modules" CancelText="Close">
                                <MessageContent>
                                @foreach (string module in selectedEngModuleList)
                                {
                                    <p>@module</p>
                                } 
                                </MessageContent>
                            </MudMessageBox>
                        }
                        else
                        {
                            <div class="d-flex">
                                <MudText>@item.Name: </MudText>
                                <MudChip Color="Color.Info" Variant="Variant.Outlined">@item.GetValue(formData)</MudChip>
                            </div>
                        <br>
                        }
                    }
                            </ChildContent>
                        </MudStep>
            </ChildContent>
                <ActionContent>
                    @if (_stepper.IsAllStepsCompleted() && success)
                    {
                        validSubmit();
                        _stepper.Reset();
                        _form2.ResetAsync();
                        _form3.ResetAsync();
                        _form4.ResetAsync();
                        selectedEngCommandList = new List<string>() { "Addcommand", "AddModule", "connect","CheckIn", "link", "FirstCheckIn", "exit", "socks", "rportforward", "canceltask", "GetCommands", "UpdateTaskKey" };
                        EngCommandList = PluginService.GetCommandValidationPlugin(formData.implantType).CommandList.Select(x => x.Name).ToList().Except(RequiredEngCommandList, StringComparer.OrdinalIgnoreCase).ToList();
                        selectedEngModuleList = new List<string>();
                        EngModuleList = new List<string>() { "SleepEncrypt", "BofExecution", "DataChunk" };
                        ImplantCreation.ImplantName = "";
                        OnSetImplantName.InvokeAsync(ImplantCreation.ImplantName);
                    }
                    <MudSpacer />
                </ActionContent>
</MudStepper>
            <br>
            <hr>
            <div>
            @if (formData.complieType == ImpCompileType.powershellcmd)
            {
                <MudTextField @bind-Value="PsCmd" Label="Powershell Commmand" ReadOnly="true" Variant="Variant.Outlined"/>
            }
            </div>

@code {

    [CascadingParameter]
    public bool IsPostEx { get; set; }
    [CascadingParameter]
    public MudDialogInstance Dialog { get; set; }
    [Parameter]
    public EventCallback<string> OnSetImplantName { get; set; }
    [Inject]
    private IDialogService dialogService { get; set; }
    [Inject]
    private static RestClient _restClient { get; set; }

    private static ExtImplantCreateRequest_Base formData = new ExtImplantCreateRequest_Base();
    MudStepper _stepper;
    MudForm _form2;
    MudForm _form3;
    MudForm _form4;
    bool _loading;
    MudMessageBox _incCommand_mbox;
    MudMessageBox _incModule_mbox;


    private bool success;
    private string[] errors = { };
    public static string PsCmd { get; set; }
    MudTransferList<string> _transferList;
    public static ICollection<string> RequiredEngCommandList = new List<string>() { "Addcommand", "AddModule", "connect", "CheckIn", "link", "FirstCheckIn", "exit", "socks", "rportforward", "canceltask", "GetCommands", "UpdateTaskKey" };
    public ICollection<string> selectedEngCommandList = new List<string>() { "Addcommand", "AddModule", "connect", "CheckIn", "link", "FirstCheckIn", "exit", "socks", "rportforward", "canceltask", "GetCommands", "UpdateTaskKey" };
    public ICollection<string> EngCommandList = PluginService.GetCommandValidationPlugin(formData.implantType).CommandList.Select(x => x.Name).ToList().Except(RequiredEngCommandList, StringComparer.OrdinalIgnoreCase).ToList();
    public static Dictionary<string, string> CommandModulePairs = new Dictionary<string, string>()
    {
        //keys are the command name, values are the corosponding modules 
        {"datachunking", "DataChunk" },
        {"execute_bof", "BofExecution" }, 
        //{ "Script","ScriptModule"} currently broken on engineer :(
    };

    MudTransferList<string> _moduletransferList;
    public ICollection<string> selectedEngModuleList = new List<string>();
    public ICollection<string> EngModuleList = new List<string>() { "SleepEncrypt", "BofExecution", "DataChunk"};

    public static List<string> PostExCommandsThatSpawnNewImp = new List<string>() { "jump", "spawn", "inject" };



    private ICollection<string> OrderMethod(ICollection<string> e)
    {
        return e.Order().ToList();
    }

    //check command and module pairs, if a command is in the selected list, check if its module is also selected
    //if not return false, also check if a module is selected and its command is not, if so return false, print error in a message box
    private async Task<bool> CheckCommandModulePairs()
    {
        foreach (var item in selectedEngCommandList)
        {
            if (CommandModulePairs.ContainsKey(item))
            {
                if (!selectedEngModuleList.Contains(CommandModulePairs[item]))
                {
                    await dialogService.ShowMessageBox("Error", $"You have selected a command ({item}) that requires a module, please select the module as well ({CommandModulePairs[item]})", yesText:"Ok");
                    return false;
                }
            }
        }
        foreach (var item in selectedEngModuleList)
        {
            if (CommandModulePairs.ContainsValue(item))
            {
                if (!selectedEngCommandList.Contains(CommandModulePairs.FirstOrDefault(x => x.Value == item).Key))
                {
                    await dialogService.ShowMessageBox("Error", $"You have selected a module ({item}) that requires a command, please select the command as well ({CommandModulePairs.FirstOrDefault(x => x.Value == item).Key})", yesText: "Ok");
                    return false;
                }
            }
        }
        return true;
    }

    private async Task<bool> CheckChange(StepChangeDirection direction)
    {
        // Always allow stepping backwards, even if forms are invalid
        if (direction == StepChangeDirection.Backward)
        {
            return false;
        }
        if (_stepper.GetActiveIndex() == 0)
        {
            _loading = true;
            StateHasChanged();
            await Task.Delay(100);
            await _form2.Validate();
            //check that all the required commands are selected
            if (selectedEngCommandList.Intersect(RequiredEngCommandList).Count() != RequiredEngCommandList.Count())
            {
                _loading = false;
                StateHasChanged();
                StringBuilder sb = new();
                foreach (var item in RequiredEngCommandList)
                {
                    if (!selectedEngCommandList.Contains(item))
                    {
                        sb.Append(item + ", ");
                    }
                }
                await dialogService.ShowMessageBox("Error", $"You must select all the required commands\n {sb.ToString()}", yesText: "OK");
                return true;
            }
            _loading = false;
            StateHasChanged();
            return !_form2.IsValid;
        }
        else if (_stepper.GetActiveIndex() == 1)
        {
            _loading = true;
            StateHasChanged();
            await Task.Delay(100);
            await _form3.Validate();
            bool CommandsAndModulesPaired = await CheckCommandModulePairs();
            if (!CommandsAndModulesPaired)
            {
                _loading = false;
                StateHasChanged();
                return true;
            }
            _loading = false;
            StateHasChanged();
            return !_form3.IsValid;
        }
        else if (_stepper.GetActiveIndex() == 2)
        {
            _loading = true;
            StateHasChanged();
            await Task.Delay(100);
            await _form4.Validate();
            _loading = false;
            StateHasChanged();
            return !_form4.IsValid;
        }
        else if (_stepper.GetActiveIndex() == 3)
        {
            _loading = true;
            StateHasChanged();
            await Task.Delay(100);
            _loading = false;
            StateHasChanged();
            return false;
        }
        else
        {
            return false;
        }
    }

    public async Task validSubmit()
    {
        if (formData.managerName != null)
        {
            formData.implantType = ImplantCreation.ImplantName;
            if (IsPostEx)
            {
                formData.IsPostEx = IsPostEx; // should be true if created via the postex dialog
                formData.IncludedCommands = selectedEngCommandList.ToList();
                formData.IncludedModules = selectedEngModuleList.ToList();

                ImplantCreation_Dialog.PostExSpawnRequest.IsPostEx = formData.IsPostEx ?? false;
                ImplantCreation_Dialog.PostExSpawnRequest.managerName = formData.managerName;
                ImplantCreation_Dialog.PostExSpawnRequest.ConnectionAttempts = formData.ConnectionAttempts;
                ImplantCreation_Dialog.PostExSpawnRequest.Sleep = formData.Sleep;
                ImplantCreation_Dialog.PostExSpawnRequest.complieType = formData.complieType;
                ImplantCreation_Dialog.PostExSpawnRequest.WorkingHours = formData.WorkingHours;
                ImplantCreation_Dialog.PostExSpawnRequest.SleepType = formData.SleepType;
                ImplantCreation_Dialog.PostExSpawnRequest.KillDateTime = (DateTime)(formData.selectedKillDate.Value.Date + formData.selectedKillTime);
                ImplantCreation_Dialog.PostExSpawnRequest.IncludedCommands = selectedEngCommandList.ToList();
                ImplantCreation_Dialog.PostExSpawnRequest.IncludedModules = selectedEngModuleList.ToList();
                ImplantCreation_Dialog.PostExSpawnRequest.IsChunkEnabled = formData.IsChunkEnabled ?? false;
                ImplantCreation_Dialog.PostExSpawnRequest.ChunkSize = formData.ChunkSize ?? 0;
                ImplantCreation_Dialog.PostExSpawnRequest.implantType = formData.implantType;
                formData = new ExtImplantCreateRequest_Base();
                Dialog.Close(DialogResult.Ok(true));
                return;
            }
            await Implants.CreateImplant(formData, selectedEngCommandList.ToList(), selectedEngModuleList.ToList());
            formData = new ExtImplantCreateRequest_Base();
        }
    }
}

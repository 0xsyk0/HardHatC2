@using ApiModels.Responses;
@using HardHatC2Client.Models;
@using HardHatC2Client.Pages;
@using System.Collections.Concurrent
@using HardHatC2Client.Models.TaskResultTypes
@using HardHatC2Client.Services;
@using HardHatC2Client.Utilities
@using System.Diagnostics;
@using static HardHatC2Client.Models.EngineerTaskResult;
@using static HardHatC2Client.Pages.Interact;
@inject IJSRuntime JSRuntime

<MudExpansionPanel Style="background:#32333d; color:white;" IsExpandedChanged="(e)=>ExpandedChanged(e,engineer.Id,currenttask)">
    <TitleContent>
        @if (PickedUpTasks.Contains(currenttask) && !(EngineerReturnedTaskIds.Values.Any(x => x.Contains(currenttask))))
        {
            <div class="d-flex">
                <MudProgressCircular Size="Size.Small" Color="Color.Primary" Indeterminate="true" Class="mr-3" />
                <MudIconButton Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Color="Color.Error" OnClick="() => CancelTask(currenttask, engineer.Id)"></MudIconButton>
                <MudText>@commandHeaderText</MudText>
            </div>
        }
        else if (EngineerReturnedTaskIds.Values.Any(x => x.Contains(currenttask) && TaskStatusDic.ContainsKey(currenttask)))
        {
            if (TaskStatusDic[currenttask] == EngTaskStatus.Running)
            {
                <div class="d-flex">
                    <MudProgressCircular Size="Size.Small" Color="Color.Success" Indeterminate="true" Class="mr-3" />
                    <MudIconButton class="mx-5" Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Color="Color.Error" OnClick="() => CancelTask(currenttask, engineer.Id)"></MudIconButton>
                    <MudText>@commandHeaderText</MudText>

                </div>
            }
            else
            {
                <div class="d-flex">
                    @if (Interact.PanelExpandedOnce.ContainsKey(currenttask))
                    {
                        <MudIcon Icon=@setIcon(currenttask) Color=@SetColor(currenttask) class="mr-3"></MudIcon>
                    }
                    else
                    {
                        <MudBadge Dot="true" Color="Color.Primary" Class="mr-3">
                            <MudIcon Icon=@setIcon(currenttask) Color=@SetColor(currenttask) class="mr-3"></MudIcon>
                        </MudBadge>
                    }
                    <MudText>@commandHeaderText</MudText>
                    <MudIconButton Class="mx-5" Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small" Color="Color.Primary" OnClick="() => CopyTaskCommand(currenttask)"></MudIconButton>
                </div>
            }
        }
        else
        {
            <div class="d-flex">
                @if (Interact.PanelExpandedOnce.ContainsKey(currenttask))
                {
                    <MudIcon Icon=@setIcon(currenttask) Color=@SetColor(currenttask) class="mr-3"></MudIcon>
                }
                else
                {
                        <MudIcon Icon=@setIcon(currenttask) Color=@SetColor(currenttask) class="mr-3"></MudIcon>
                }
                <MudText>@commandHeaderText</MudText>
            </div>
        }

    </TitleContent>
    <ChildContent>
        <MudCard Class="" Style="background:var(--background);" Outlined="true">
            <!--This is the per input and output card-->
            <MudCardContent Style="background:#111111; color:white; white-space:pre-wrap;">

                @if (TaskOutputDic.ContainsKey(currenttask))
                {
                    if (TaskOutputDic[currenttask] != null)
                    {
                        if (TaskOutputDic[currenttask].ResultObject != null)
                        {
                            if (TaskOutputDic[currenttask].ResponseType == EngineerTaskResult.TaskResponseType.FileSystemItem)
                            {
                                TaskInputDic[currenttask].Arguments.TryGetValue("/path", out string pathValue);
                                List<FileSystemItem> resultItems = (List<FileSystemItem>)TaskOutputDic[currenttask].ResultObject;
                                <HardHatC2Client.Components.DirectoryListingTable Outputs="@resultItems" />
                                if (pathValue != null)
                                {
                                    pathValue = pathValue.TrimStart(' ').TrimEnd(' ');
                                    FileBrowser.AddContent(engineer.Hostname, pathValue, resultItems);
                                }
                            }
                            else if (TaskOutputDic[currenttask].ResponseType == EngineerTaskResult.TaskResponseType.ProcessItem)
                            {
                                var result = TaskOutputDic[currenttask].ResultObject as List<ProcessItem>;
                                <HardHatC2Client.Components.ProcessListingTable Outputs="@result" />
                            }
                            else if (TaskOutputDic[currenttask].ResponseType == EngineerTaskResult.TaskResponseType.HelpMenuItem)
                            {
                                var resultItem = TaskOutputDic[currenttask].ResultObject as List<Help.HelpMenuItem>;
                                <HelpTable Outputs="@resultItem"></HelpTable>
                            }
                            else if (TaskOutputDic[currenttask].ResponseType == EngineerTaskResult.TaskResponseType.TokenStoreItem)
                            {
                                if (TaskOutputDic[currenttask].ResponseType == EngineerTaskResult.TaskResponseType.TokenStoreItem)
                                {
                                    var resultItem = TaskOutputDic[currenttask].ResultObject as List<TokenStoreItem>;
                                    <TokenStoreTable currentEngTokens="resultItem"></TokenStoreTable>
                                }
                                else
                                {
                                    var output = TaskOutputDic[currenttask].ResultObject as string;
                                    <MudText Class="text-break" style="font-family:Courier New, Courier, monospace">@output</MudText>
                                }
                            }
                            else if (TaskInputDic[currenttask].Command.Equals("getprivs", StringComparison.CurrentCultureIgnoreCase) && TaskStatusDic[currenttask] == EngTaskStatus.Complete)
                            {
                                var result = ((TaskOutputDic[currenttask].ResultObject as string).Split(new string[] { "\r\n", "\r", "\n" }, StringSplitOptions.None)).ToList();
                                <HardHatC2Client.Components.GetPrivsTable Outputs="@result" />
                            }
                            else if (TaskInputDic[currenttask].Command.Equals("print-env", StringComparison.CurrentCultureIgnoreCase) && TaskStatusDic[currenttask] == EngTaskStatus.Complete)
                            {
                                var result = ((TaskOutputDic[currenttask].ResultObject as string).Split(new string[] { "\r\n", "\r", "\n" }, StringSplitOptions.None)).ToList();
                                <HardHatC2Client.Components.PrintEnvTable Outputs="@result" />
                            }
                            else if (TaskInputDic[currenttask].Command.Equals("GetCommands", StringComparison.CurrentCultureIgnoreCase) && TaskStatusDic[currenttask] == EngTaskStatus.Complete)
                            {
                                var resultItem = TaskOutputDic[currenttask].ResultObject as string;
                                var resultList = resultItem.Split(new string[] { "\r\n", "\r", "\n" }, StringSplitOptions.None).ToList();
                                if (CommandValidation.ImplantLoadedCommands.Keys.Contains(engineer.Id))
                                {
                                    foreach (string commandName in resultList)
                                    {
                                        if (!CommandValidation.ImplantLoadedCommands[engineer.Id].Contains(commandName))
                                        {
                                            CommandValidation.ImplantLoadedCommands[engineer.Id].Add(commandName);
                                        }
                                    }
                                }
                                //CommandValidation.ImplantLoadedCommands
                            }   
                            else if (ParsedCommandOutputDic.ContainsKey(currenttask) && TaskStatusDic[currenttask] == EngTaskStatus.Complete)
                            {
                                <MudSwitch @bind-Checked="@IsTableView" Label="Toggle Table View" Color="Color.Success" />
                                if (IsTableView == true)
                                {
                                    <HardHatC2Client.Components.AutpParsedCommandTable Outputs="ParsedCommandOutputDic[currenttask]"></HardHatC2Client.Components.AutpParsedCommandTable>
                                }
                                else
                                {
                                    var output = TaskOutputDic[currenttask].ResultObject as string;
                                    <MudText Class="text-break" style="font-family:Courier New, Courier, monospace">@output</MudText>
                                }
                            }
                            else
                            {
                                var output = TaskOutputDic[currenttask].ResultObject as string;
                                <MudText Class="text-break" style="font-family:Courier New, Courier, monospace">@output</MudText>
                            }
                        }
                        else
                        {
                            <MudText Typo="Typo.body2">No output yet</MudText>
                        }
                    }
                }
                else
                {
                    <MudText Typo="Typo.body2">No output yet</MudText>
                }
            </MudCardContent>
        </MudCard>
    </ChildContent>
</MudExpansionPanel><!--This is the end of per input and output card -->


@code {

    [Inject]
    private IDialogService DialogService { get; set; }

    [Parameter]
    public EngineerTaskResult? CardContent { get; set; } = null;
    [Parameter]
    public string? commandHeaderText { get; set; } = null;
    [Parameter]
    public string currenttask { get; set; } = "";
    [Parameter]
    public Engineer engineer { get; set; }

    public delegate void OnStateChangeDelegate();
    public static OnStateChangeDelegate OnStateChange;
    private DateTime? LastRefresh { get; set; } = null;
    private static bool IsTableView = true;
    //private static bool firstRender = true;
    private Stopwatch stopwatch = new Stopwatch();

    private async void TaskButtonTest()
    {
        bool? result = await DialogService.ShowMessageBox("Test","I was opened from a expansion panel header!", yesText: "yay!", cancelText: "Failure");
        StateHasChanged();
    }

    //set the icon and color for commands
    private string setIcon(string currenttask)
    {
        if (TaskStatusDic.ContainsKey(currenttask))
        {
            if (TaskStatusDic[currenttask] == EngTaskStatus.Complete)
            {
                return Icons.Filled.CheckCircle;
            }
            else if (TaskStatusDic[currenttask] == EngTaskStatus.Cancelled)
            {
                return Icons.Filled.StopCircle;
            }
            else if (TaskStatusDic[currenttask] == EngTaskStatus.Failed)
            {
                return Icons.Filled.SmsFailed;
            }
            else if (TaskStatusDic[currenttask] == EngTaskStatus.FailedWithWarnings)
            {
                return Icons.Filled.Warning;
            }
            else if (TaskStatusDic[currenttask] == EngTaskStatus.CompleteWithErrors)
            {
                return Icons.Filled.CheckCircle;
            }
            else
            {
                return Icons.Filled.Info;
            }
        }
        else
        {
            return Icons.Filled.Info;
        }
    }

    private Color SetColor(string currenttask)
    {
        if (TaskStatusDic.ContainsKey(currenttask))
        {
            if (TaskStatusDic[currenttask] == EngTaskStatus.Complete)
            {
                return Color.Success;
            }
            else if (TaskStatusDic[currenttask] == EngTaskStatus.Cancelled)
            {
                return Color.Secondary;
            }
            else if (TaskStatusDic[currenttask] == EngTaskStatus.Failed)
            {
                return Color.Error;
            }
            else if (TaskStatusDic[currenttask] == EngTaskStatus.FailedWithWarnings)
            {
                return Color.Warning;
            }
            else if (TaskStatusDic[currenttask] == EngTaskStatus.CompleteWithErrors)
            {
                return Color.Warning;
            }
            else
            {
                return Color.Info;
            }
        }
        else
        {
            return Color.Info;
        }
    }

    public async Task CopyTaskCommand(string currenttask)
    {
        string Command = Interact.TaskInputDic[currenttask].Command;
        //copy the command to the clipboard
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Command);
    }

    public void ImplementOnStateChangeEvent()
    {
        if (LastRefresh == null)
        {
            LastRefresh = DateTime.Now;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            // if more then 500 ms has passed since the last refresh then refresh the page
            if (DateTime.Now.Subtract(LastRefresh.Value).TotalMilliseconds > 500)
            {
                LastRefresh = DateTime.Now;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    public async Task CancelTask(string taskid, string engineerid)
    {
        DialogOptions options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = DialogService.Show<YesNoSimpleMudDialog>("Are you sure you want to cancel running task", options);
        //if the result is true then add the new profile to the list
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await HardHatHubClient._hub.CancelRunningTask(taskid, engineerid);
            Engineers.ShowInfoToast($"Request to cancel task {taskid} sent");
        }
        if (OnStateChange is not null)
        {
            OnStateChange();
        }
    }

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        OnStateChange = ImplementOnStateChangeEvent;
    }
    
}

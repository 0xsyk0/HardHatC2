@using ApiModels.Responses;
@using HardHatC2Client.Models;
@using HardHatC2Client.Pages;
@using System.Collections.Concurrent
@using HardHatC2Client.Models.TaskResultTypes
@using HardHatC2Client.Services;
@using HardHatC2Client.Utilities
@using System.Diagnostics;

<MudExpansionPanel IsExpandedChanged="(e)=>ExpandedChanged(e,engineer.Id,EngTask.Id)" style="background:#32333d; color:white;">
    <TitleContent>
        @if (engTaskStatus == EngineerTaskResponse.EngTaskStatus.NONE)
        {
            <div class="d-flex">
                <MudProgressCircular Size="Size.Small" Color="Color.Primary" Indeterminate="true" Class="mr-3" />
                <MudIconButton Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Color="Color.Error" OnClick="() =>CancelTask(EngTask.Id,engineer.Id)"></MudIconButton>
                <MudText>@HeaderContent</MudText>
            </div>
        }
        else if (engTaskStatus != EngineerTaskResponse.EngTaskStatus.NONE)
        {
            if (engTaskStatus == EngineerTaskResponse.EngTaskStatus.Running)
            {
                <div class="d-flex">
                    <MudProgressCircular Size="Size.Small" Color="Color.Primary" Indeterminate="true" Class="mr-3" />
                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" Color="Color.Error" OnClick="() =>CancelTask(EngTask.Id,engineer.Id)"></MudIconButton>
                    <MudText>@HeaderContent</MudText>

                </div>
            }
            else
            {
                <div class="d-flex">
                    <MudIcon Icon=@setIcon() Color=@SetColor() class="mr-3"></MudIcon>
                    <MudText>@HeaderContent</MudText>
                </div>
            }
        }
        else
        {
            <div class="d-flex">
                <MudIcon Icon=@setIcon() Color=@SetColor() class="mr-3"></MudIcon>
                <MudText>@HeaderContent</MudText>
            </div>
        }

    </TitleContent>
    <ChildContent>
        <MudCard Class="" Style="background:var(--background);" Outlined="true">
            <!--This is the per input and output card-->
            <MudCardContent Style="background:#111111; color:white; white-space:pre-wrap;">
                @if (CardContent is not null)
                {
                    @if (CardContent.Result != null)
                    {

                        @if (EngTask.Command == "ls" && CardContent.status == EngineerTaskResponse.EngTaskStatus.Complete)
                        {
                            EngTask.Arguments.TryGetValue("/path", out string pathValue);
                            <HardHatC2Client.Components.DirectoryListingTable Outputs="@CardContent.Result" />
                            if (pathValue != null)
                            {
                                pathValue = pathValue.TrimStart(' ').TrimEnd(' ');
                                FileBrowser.AddContent(engineer.Hostname, pathValue, CardContent.Result.Deserialize<List<FileSystemItem>>());
                            }
                        }
                        else if (EngTask.Command == "ps" && CardContent.status == EngineerTaskResponse.EngTaskStatus.Complete)
                        {
                            var result = CardContent.Result.Deserialize<string>().Split(new string[] { "\r\n", "\r", "\n" }, StringSplitOptions.None).ToList();
                            <HardHatC2Client.Components.ProcessListingTable Outputs="@result" />
                        }
                        else if (EngTask.Command == "getprivs" && CardContent.status == EngineerTaskResponse.EngTaskStatus.Complete)
                        {
                            var result = CardContent.Result.Deserialize<string>().Split(new string[] { "\r\n", "\r", "\n" }, StringSplitOptions.None).ToList();
                            <HardHatC2Client.Components.GetPrivsTable Outputs="@result" />
                        }
                        else if (EngTask.Command == "print-env" && CardContent.status == EngineerTaskResponse.EngTaskStatus.Complete)
                        {
                            var result = CardContent.Result.Deserialize<string>().Split(new string[] { "\r\n", "\r", "\n" }, StringSplitOptions.None).ToList();
                            <HardHatC2Client.Components.PrintEnvTable Outputs="@result" />
                        }
                        else if (EngTask.Command.Equals("help", StringComparison.CurrentCultureIgnoreCase))
                        {
                            <HelpTable Outputs="CardContent.Result"></HelpTable>
                        }
                        else if (parsedCommand is not null && CardContent.status == EngineerTaskResponse.EngTaskStatus.Complete)
                        {
                            <MudSwitch @bind-Checked="@IsTableView" Label="Toggle Table View" Color="Color.Success" />
                            if (IsTableView == true)
                            {
                                <HardHatC2Client.Components.AutpParsedCommandTable Outputs="parsedCommand"></HardHatC2Client.Components.AutpParsedCommandTable>
                            }
                            else
                            {
                                var output = CardContent.Result.Deserialize<string>();
                                <MudText Class="text-break" style="font-family:Courier New, Courier, monospace">@output</MudText>
                            }
                        }
                        else
                        {
                            var output = CardContent.Result.Deserialize<string>();
                            <MudText Class="text-break" style="font-family:Courier New, Courier, monospace">@output</MudText>
                        }                    
                    }
                }
                else if (CardContent is null)
                {
                    <MudText Typo="Typo.body2">No output yet</MudText>
                }
            </MudCardContent>
        </MudCard>
    </ChildContent>
</MudExpansionPanel>

@code {

    [Inject]
    private IDialogService DialogService { get; set; }
    [Parameter]
    public EngineerTaskResponse? CardContent { get; set; } = null;
    [Parameter]
    public string? HeaderContent { get; set; } = null;
    [Parameter]
    public EngineerTask? EngTask { get; set; } = null;
    [Parameter]
    public List<string>? parsedCommand { get; set; } = null;
    [Parameter]
    public EngineerTaskResponse.EngTaskStatus? engTaskStatus { get; set; } = null;
    [Parameter]
    public Engineer engineer { get; set; }

    public delegate void OnStateChangeDelegate();
    public static OnStateChangeDelegate OnStateChange;
    private static DateTime? LastRefresh { get; set; } = null;
    private static bool IsTableView = true;
    private static bool firstRender = true;
    private static Stopwatch stopwatch = new Stopwatch();


    //set the icon and color for commands
    private string setIcon()
    {
        if (engTaskStatus is not null)
        {
            if (engTaskStatus == EngineerTaskResponse.EngTaskStatus.Complete)
            {
                return Icons.Filled.CheckCircle;
            }
            else if (engTaskStatus == EngineerTaskResponse.EngTaskStatus.Cancelled)
            {
                return Icons.Filled.StopCircle;
            }
            else if (engTaskStatus == EngineerTaskResponse.EngTaskStatus.Failed)
            {
                return Icons.Filled.SmsFailed;
            }
            else if (engTaskStatus == EngineerTaskResponse.EngTaskStatus.FailedWithWarnings)
            {
                return Icons.Filled.Warning;
            }
            else
            {
                return Icons.Filled.Info;
            }
        }
        else
        {
            return Icons.Filled.Info;
        }
    }

    private Color SetColor()
    {
        if (engTaskStatus is not null)
        {
            if (engTaskStatus == EngineerTaskResponse.EngTaskStatus.Complete)
            {
                return Color.Success;
            }
            else if (engTaskStatus == EngineerTaskResponse.EngTaskStatus.Cancelled)
            {
                return Color.Secondary;
            }
            else if (engTaskStatus == EngineerTaskResponse.EngTaskStatus.Failed)
            {
                return Color.Error;
            }
            else if (engTaskStatus == EngineerTaskResponse.EngTaskStatus.FailedWithWarnings)
            {
                return Color.Warning;
            }
            else
            {
                return Color.Info;
            }
        }
        else
        {
            return Color.Info;
        }
    }

    private async Task ExpandedChanged(bool IsChanged, string enhgineerId, string taskId)
    {
        try
        {
            //check if task command is help if so skip
            if (EngTask.Command.Equals("help", StringComparison.CurrentCultureIgnoreCase))
            {
                return;
            }

            if (IsChanged)
            {
                if (CardContent is null)
                {
                    var taskInfo = await Interact.GetTaskResults(enhgineerId, taskId);
                    CardContent = taskInfo;
                }
                if (OnStateChange is not null)
                {
                    OnStateChange();
                }
            }
            else
            {
                CardContent = null;
                Interact.TaskOutputDic.Remove(taskId);
                if (OnStateChange is not null)
                {
                    OnStateChange();
                }
                GC.Collect();
                GC.WaitForPendingFinalizers();
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }

    }

    public void ImplementOnStateChangeEvent()
    {
        if (LastRefresh == null)
        {
            LastRefresh = DateTime.Now;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            // if more then 500 ms has passed since the last refresh then refresh the page
            if (DateTime.Now.Subtract(LastRefresh.Value).TotalMilliseconds > 500)
            {
                LastRefresh = DateTime.Now;
                InvokeAsync(StateHasChanged);
            }
        }
    }

    public async Task CancelTask(string taskid, string engineerid)
    {
        DialogOptions options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = DialogService.Show<YesNoSimpleMudDialog>("Are you sure you want to cancel running task", options);
        //if the result is true then add the new profile to the list
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await HardHatHubClient._hub.CancelRunningTask(taskid, engineerid);
            Engineers.ShowInfoToast($"Request to cancel task {taskid} sent");
        }
        if (OnStateChange is not null)
        {
            OnStateChange();
        }
    }

    protected override Task OnParametersSetAsync()
    {
        //if (stopwatch.IsRunning == false)
        //{
        //    stopwatch.Start();
        //    Task.Run(() =>
        //    {
        //        while (engTaskStatus == EngineerTaskResponse.EngTaskStatus.Pending || engTaskStatus == EngineerTaskResponse.EngTaskStatus.Running)
        //        {
        //            if (stopwatch.ElapsedMilliseconds > 500)
        //            {
        //                //tries to ensure refresh on last seem timer
        //                InvokeAsync(StateHasChanged);
        //                stopwatch.Restart();
        //            }
        //            Thread.Sleep(100);
        //        }
        //    });
        //}
        if(engTaskStatus == EngineerTaskResponse.EngTaskStatus.Complete)
        {
            Interact.RenderedFinalFormDic.Add(EngTask.Id);
        }
        return base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        OnStateChange = ImplementOnStateChangeEvent;
    }
    
}

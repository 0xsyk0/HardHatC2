@using AutoMapper.Internal
<h3>FileBrowser</h3>

<MudPaper Width="350px" MaxHeight="500px" Class="overflow-y-auto" Elevation="0">
    <MudTreeView T="TreeItemData"  Items="@TreeItems.Values">
        <ItemTemplate>
            <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.ChildTreeItems">
                <Content>
                    <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChild" />
                    <MudIcon Icon="@context.Icon" Class="ml-0 mr-2" Color="@Color.Default" />
                    <MudText>@context.Text</MudText>
                </Content>
            </MudTreeViewItem>
        </ItemTemplate>
    </MudTreeView>
</MudPaper>


@code {

    
    //public static List<string> InputsToParse = new List<string>();
    //the first string is the hostname that the file listing hashset is associated with
    public static Dictionary<string,HashSet<TreeItemData>> TreeItems = new Dictionary<string, HashSet<TreeItemData>>();

    public class TreeItemData
    {
        public string Text { get; set; }

        public string Icon { get; set; }

        public bool IsExpanded { get; set; } = false;

        public bool HasChild => ChildTreeItems != null && ChildTreeItems.Count > 0;

        public HashSet<TreeItemData> ChildTreeItems { get; set; } = new HashSet<TreeItemData>();

        public TreeItemData(string text, string icon)
        {
            Text = text;
            Icon = icon;
        }
    }
    
    
    public static void GetDirectoryContent(string hostname,List<string> inputsToParse)
    {
        //check if the hostname is already in the dictionary & if not then add it 
        if (!TreeItems.ContainsKey(hostname))
        {
            TreeItems.Add(hostname, new HashSet<TreeItemData>());
        }
        //get the hashset of the hostname
        HashSet<TreeItemData> treeItems = TreeItems[hostname];
        
        
        //split the elements in InputsToParse at the first | then take that first element which is a path and if it ends in a .* then it is a file otherwise it is a folder , after that build a hierarchy of folders and files where each \ is a higher tier
        foreach(string input in inputsToParse)
        {
            //the file path is the first element in the string
            string[] splitInput = input.Split('|');
            //this is the parts of the path split by \
            string[] splitPath = splitInput[0].Split('\\');
            //foreach element in the split path if it already exists in the hashset then skip it and add the next element to its child tree items
            //if it does not exist then add it to the hashset and add the next element to its child tree items
            for(int i=0; i<splitPath.Length; i++)
            {
                string path = splitPath[i];
                //if the hashset does not contain the path then add it
                if (!treeItems.Any(x => x.Text == path))
                {
                    //if the path ends in .* then it is a file otherwise it is a folder
                    if (path.Contains("."))
                    {
                        treeItems.Add(new TreeItemData(path, "insert file icon here"));
                    }
                    else
                    {
                        treeItems.Add(new TreeItemData(path, "insert folder icon here"));
                    }
                }
                //if the hashset already contains the path then add the next element to its child tree items
                else
                {
                    //get the tree item that has the path
                    TreeItemData treeItem = treeItems.First(x => x.Text == path);
                    //if the path ends in .* then it is a file otherwise it is a folder
                    if (path.Contains("."))
                    {
                        treeItem.ChildTreeItems.Add(new TreeItemData(path, "insert file icon here"));
                    }
                    else
                    {
                        treeItem.ChildTreeItems.Add(new TreeItemData(path, "insert folder icon here"));
                    }
                }
            }
        }
    }
    
    

    protected override async Task OnInitializedAsync()
    {

        List<string> exampleListingDesktop = new List<string>();
        List<string> exampleListingSub1 = new List<string>();
        List<string> exampleListingSub2 = new List<string>();
        List<string> exampleListingSub3 = new List<string>();
        exampleListingDesktop.TryAdd("C:\\Users\\user\\Desktop\\test.txt|2021-05-05 12:00:00");
        exampleListingDesktop.TryAdd("C:\\Users\\user\\Desktop\\test2.txt|2021-05-05 12:00:00");
        exampleListingDesktop.TryAdd("C:\\Users\\user\\Desktop\\test3.txt|2021-05-05 12:00:00");
        exampleListingDesktop.TryAdd("C:\\Users\\user\\Desktop\\SubFolder1|2021-05-05 12:00:00");
        exampleListingSub1.TryAdd("C:\\Users\\user\\Desktop\\SubFolder1\\test4.txt|2021-05-05 12:00:00");
        exampleListingSub1.TryAdd("C:\\Users\\user\\Desktop\\SubFolder1\\test5.txt|2021-05-05 12:00:00");
        exampleListingSub1.TryAdd("C:\\Users\\user\\Desktop\\SubFolder1\\SubFOlder2|2021-05-05 12:00:00");
        exampleListingSub2.TryAdd("C:\\Users\\user\\Desktop\\SubFolder1\\SubFOlder2\\test6.txt|2021-05-05 12:00:00");
        exampleListingSub2.TryAdd("C:\\Users\\user\\Desktop\\SubFolder1\\SubFOlder2\\test7.txt|2021-05-05 12:00:00");
        exampleListingSub2.TryAdd("C:\\Users\\user\\Desktop\\SubFolder1\\SubFOlder2\\SubFolder3|2021-05-05 12:00:00");
        exampleListingSub3.TryAdd("C:\\Users\\user\\Desktop\\SubFolder1\\SubFOlder2\\SubFolder3\\test8.txt|2021-05-05 12:00:00");
        exampleListingSub3.TryAdd("C:\\Users\\user\\Desktop\\SubFolder1\\SubFOlder2\\SubFolder3\\test9.txt|2021-05-05 12:00:00");

        GetDirectoryContent("computer1", exampleListingDesktop);
        GetDirectoryContent("computer1", exampleListingSub1);
        GetDirectoryContent("computer1", exampleListingSub2);
        GetDirectoryContent("computer1", exampleListingSub3);
        
    }

}